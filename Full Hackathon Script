#CLEANED UP

#!/bin/bash

#------------------------------------------------------------------------------
# Script Name:  Side Information Dashboard
# Version:      2.5.3
# Author:       Your Name/Organization
# Date:         April 7, 2025
# Description:  Displays a rotating series of dialogs showing live traffic,
#               BART, Caltrain, and service status information.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Global Variables
#------------------------------------------------------------------------------
set_master_variables () {
    # API Keys (Keep these secure and consider environment variables)
    caltrain_api_key="YOUR_CALTRAIN_API_KEY"
    gemini_key="YOUR_GEMINI_API_KEY"
    BART_API_KEY="YOUR_BART_API_KEY"

    # API Rate Limiting (Prevent excessive calls)
    caltrain_api_countdown=4
    caltrain_api_pull_time=<span class="math-inline">\(date \+"%m\-%d\-%Y %H\:%M\:%S"\)
bart\_api\_countdown\=4
bart\_api\_pull\_time\=</span>(date +"%m-%d-%Y %H:%M:%S")

    # Dialog Configuration
    updatedDialogVersion="2.5.3"
    dialog_bin="/usr/local/bin/dialog"
    dialog_download_url="https://github.com/swiftDialog/swiftDialog/releases/download/v${updatedDialogVersion}/dialog-${updatedDialogVersion}-4785.pkg"
    dialogDir="/usr/local/"
    swiftDialogPKG="swiftDialog.pkg"
    dialogAppDir="/Library/Application Support/Dialog/Dialog.app"

    # Wallpaper Configuration
    wallpaperDir="/Library/Application Support/wallpaper/"
    wallpaperImg="desktopwallpaper.jpg"
    wallpaperPKGDir="/Library/Application Support/Jamf/Waiting Room/wallpaper.pkg"

    # Dialog Display Settings
    dialogTimer=15 # Seconds to display each alert
    dialogIconDir="/Library/Application Support/SideIT/finishing.png"
    dialogBackGroundDir="/Library/Application Support/wallpaper/desktopwallpaper.jpg"
    dialogSlackURL="https://app.slack.com/client/T0XD2CN2V/CNW9PA7NG"
    dialogHDURL="https://sideinc.freshservice.com/support/catalog/items/131"
    dialogTitleFont="name=Arial-MT,colour=#CE87C1,size=30"
}

#------------------------------------------------------------------------------
# Function: install_dialog
# Description: Checks for and installs/updates the swiftDialog application.
#------------------------------------------------------------------------------
install_dialog () {
    echo "Checking for wallpaper..."
    if [ -f "$wallpaperDir$wallpaperImg" ]; then
        echo "Wallpaper found, skipping installation."
    else
        echo "Installing wallpaper..."
        sudo /usr/sbin/installer -pkg "$wallpaperPKGDir" -target /
    fi

    echo "Checking for swiftDialog..."
    if [ -f "<span class="math-inline">dialog\_bin" \]; then
echo "swiftDialog found\. Checking version\.\.\."
dialogVersion\=</span>(defaults read "$dialogAppDir/Contents/Info" CFBundleShortVersionString)
        echo "Installed swiftDialog Version: $dialogVersion"

        if [ "$dialogVersion" != "$updatedDialogVersion" ]; then
            echo "Installed version is outdated. Updating swiftDialog to $updatedDialogVersion..."
            download_install_dialog
        else
            echo "swiftDialog is up to date."
        fi
    else
        echo "swiftDialog not found. Downloading and installing..."
        download_install_dialog
    fi
}

#------------------------------------------------------------------------------
# Function: download_install_dialog
# Description: Downloads and installs the swiftDialog package.
#------------------------------------------------------------------------------
download_install_dialog () {
    echo "Downloading swiftDialog package from: $dialog_download_url"
    sudo /usr/bin/curl -L "$dialog_download_url" -o "$dialogDir$swiftDialogPKG"

    if [ -f "$dialogDir$swiftDialogPKG" ]; then
        echo "Installing swiftDialog..."
        sudo /usr/sbin/installer -pkg "$dialogDir$swiftDialogPKG" -target /
        sleep 5

        echo "Cleaning up downloaded package..."
        sudo rm -r "$dialogDir$swiftDialogPKG"
    else
        echo "Error: Failed to download swiftDialog package."
        exit 1
    fi
}

#------------------------------------------------------------------------------
# Function: services_dialog
# Description: Displays the status of various web services.
#------------------------------------------------------------------------------
services_dialog () {
    dTitle="Service Statuses"
    dMessage="Website Statuses are pulled from isitdown.com - these are just for the main website and not the service.\n
Services Statuses are pulled from their respective status pages.\n

Google WWW:  $status_google    |    Service:  $google_status \n\n
Okta WWW:    $status_okta      |    Service:  $okta_status \n\n
Slack WWW:   $status_slack     |    Service:  $slack_status \n\n
Atlassian WWW: $status_atlassian |    Service:  $atlassian_status \n\n
Zoom WWW:    $status_zoom      |    Service:  $zoom_status \n\n
Side WWW:    $status_side      |    Service:  $sideapp_status
"
    dButton1="Quit"
    timer="$dialogTimer"
    dIconDir="$dialogIconDir"
    dBackDir="$dialogBackGroundDir"
    dInfoBox="__Welcome to Side!__\n\n
__580 4th St, San Francisco, CA__
\n\n
(415) 525-4913
\n\n
__Need Help?__
[helpdesk@side.com](<span class="math-inline">dialogHDURL\)"
get\_driving\_traffic\_data &
userTimeSelection\=</span>("${dialog_bin}" \
        --title "$dTitle" \
        --titlefont "$dialogTitleFont" \
        --message "$dMessage" \
        --alignment center \
        --messagefont "name=Arial-MT,size=20" \
        --icon "$dIconDir" \
        --iconsize 120 \
        --button1text "$dButton1" \
        --height 100% \
        --width 100% \
        --background "$dBackDir" \
        --infobox "$dInfoBox" \
        --timer "<span class="math-inline">timer" \\
\-\-webcontent "https\://i\.gifer\.com/PYHc\.gif"
\#\-\-blurscreen
\)
returncode\=</span>?

    case "${returncode}" in
        0)
            echo "Pressed Button 1: QUIT"
            kill "<span class="math-inline">dialog\_pid" 2\>/dev/null \|\| echo "Dialog process not found or already terminated\."
exit 0
;;
\*\)
echo "Doing nothing, next slide\."
;;
esac
\}
\#\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\# Function\: get\_services\_data
\# Description\: Retrieves status information for various web services and sites\.
\#\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
get\_services\_data \(\) \{
get\_service\_statuses \(\) \{
google\_status\_pull\(\) \{
STATUS\_PAGE\=</span>(curl -s "https://www.google.com/appsstatus/")
            if echo "$STATUS_PAGE" | grep -q 'class="status yellow"' || echo "<span class="math-inline">STATUS\_PAGE" \| grep \-q 'class\="status red"'; then
google\_status\="⚠️ Issues"
else
google\_status\="✅ Normal"
fi
\}
okta\_status\_pull \(\) \{
STATUS\=</span>(curl -s "https://status.okta.com/api/v2/status.json")
            if echo "$STATUS" | jq -q '.status == "active"' || echo "<span class="math-inline">STATUS" \| jq \-q '\.status \=\= "degraded\_performance"'; then
okta\_status\="⚠️ Issues"
else
okta\_status\="✅ Operational"
fi
\}
slack\_status\_pull \(\) \{
PAGE\=</span>(curl -s "https://slack-status.com/")
            if echo "<span class="math-inline">PAGE" \| grep \-q "Some users may be having trouble"; then
slack\_status\="⚠️ Issues"
else
slack\_status\="✅ Normal"
fi
\}
zoom\_status\_pull \(\) \{
STATUS\=</span>(curl -s "https://api.zoom.us/v2/metrics/status")
            SERVICE_STATUS=$(echo "<span class="math-inline">STATUS" \| jq \-r '\.status\.description' 2\>/dev/null\)
INCIDENTS\=</span>(echo "<span class="math-inline">STATUS" \| jq \-r '\.incidents \| length' 2\>/dev/null\)
INCIDENTS\=</span>{INCIDENTS:-0}
            if [ "$INCIDENTS" -gt 0 ] || [ -n "$SERVICE_STATUS" ] && [ "$SERVICE_STATUS" != "All services operational" ]; then
                zoom_status="⚠️ Issues (<span class="math-inline">INCIDENTS\)"
else
zoom\_status\="✅ Operational"
fi
\}
atlassian\_status\_pull \(\) \{
STATUS\=</span>(curl -s "https://api.status.atlassian.com/1.0/status")
            SERVICE_STATUS=$(echo "<span class="math-inline">STATUS" \| jq \-r '\.status\.description' 2\>/dev/null\)
INCIDENTS\=</span>(echo "<span class="math-inline">STATUS" \| jq \-r '\.incidents \| length' 2\>/dev/null\)
INCIDENTS\=</span>{INCIDENTS:-0}
            if [ "$INCIDENTS" -gt 0 ] || [ -n "$SERVICE_STATUS" ] && [ "$SERVICE_STATUS" != "All Systems Operational" ]; then
                atlassian_status="⚠️ Issues (<span class="math-inline">INCIDENTS\)"
else
atlassian\_status\="✅ Operational"
fi
\}
sideapp\_status\_pull \(\) \{
STATUS\=</span>(curl -s -w "%{http_code}" -o temp_output "https://agent.sideinc.com/txm/api/health")
            http_code=<span class="math-inline">\{STATUS\: \-3\}
sideapp\_status\_result\=</span>(<temp_output)
            rm -f temp_output

            if [ "$http_code" -eq 200 ]; then
                sideapp_status="✅ OK"
            else
                sideapp_status="⚠️ HTTP $http_code"
            fi
        }

        google_status_pull
        okta_status_pull
        slack_status_pull
        zoom_status_pull
        atlassian_status_pull
        sideapp_status_pull
    }

    get_site_statuses () {
        check_status() {
            local service_name="$1"
            local url="<span class="math-inline">2"
local response\=</span>(curl -s "$url")

            if echo "$response" | grep -q "is UP"; then
                echo "✅ UP"
            elif echo "<span class="math-inline">response" \| grep \-q "is DOWN"; then
echo "❌ DOWN"
else
echo "❓ Unknown"
fi
\}
status\_google\=</span>(check_status "Google" "https://www.isitdownrightnow.com/google.com.html")
        status_okta=<span class="math-inline">\(check\_status "Okta" "https\://www\.isitdownrightnow\.com/okta\.com\.html"\)
status\_slack\=</span>(check_status "Slack" "https://www.isitdownrightnow.com/slack.com.html")
        status_atlassian=<span class="math-inline">\(check\_status "Atlassian" "https\://www\.isitdownrightnow\.com/atlassian\.com\.html"\)
status\_zoom\=</span>(check_status "Zoom" "https://www.isitdownrightnow.com/zoom.us.html")
        status_side=$(check_status "Side" "https://www.isitdownrightnow.com/side.com.html")
    }

    get_service_statuses
    get_site_statuses

    wait "$services_dialog_pid"
}

#------------------------------------------------------------------------------
# Function: get_caltrain_data
# Description: Retrieves and processes Caltrain service alerts.
#------------------------------------------------------------------------------
get_caltrain_data () {
    echo "Caltrain API Countdown: $caltrain_api_countdown"

    if (($caltrain_api_countdown == 0 || $caltrain_api_countdown == 4)); then
        echo "Fetching Caltrain service alerts..."

        if [ -z "$caltrain_api_key" ]; then
            echo "Error: Caltrain API key is missing!"
            return 1
        fi

        url="http://api.511.org/transit/servicealerts?api_key=$caltrain_api_key&agency=CT"
        echo "Requesting URL: <span class="math-inline">url"
response\=</span>(curl -s "$url")

        if [ -n "<span class="math-inline">response" \]; then
echo "Processing Caltrain alerts with Gemini\.\.\."
cleaned\_up\_text\=</span>(echo "$response" | gemini-cli prompt "Please clean up the following text and organize it into a bullet point list with each item separated by new lines, removing any extraneous information and only leave the list items in english. Make sure the items are separated in new lines in bullet point order and all non-english is removed. Remove anything with local week day. Here’s the text: $(cat -)" --key "<span class="math-inline">gemini\_key"\)
else
cleaned\_up\_text\="No Caltrain service alerts found\."
fi
caltrain\_api\_countdown\=3 \# Reset the countdown
caltrain\_api\_pull\_time\=</span>(date +"%m-%d-%Y %H:%M:%S")
        echo "Caltrain Data Pulled At: $caltrain_api_pull_time"
    fi

    echo "Cleaned Caltrain Alerts:"
    echo "$cleaned_up_text"
    echo "Next Caltrain API Pull In: $caltrain_api_countdown"

    if [ -n "$cleaned_up_text" ] && [ "$cleaned_up_text" != "No Caltrain service alerts found." ]; then
        msg_font="name=Arial-MT,size=18,colour=#FF0000"
    else
        msg_font="name=Arial-MT,size=18"
    fi
    let caltrain_api_countdown=$caltrain_api_countdown-1
    wait "$bart_dialog_pid"
}

#------------------------------------------------------------------------------
# Function: caltrain_dialog
# Description: Displays live Caltrain status and schedule information.
#------------------------------------------------------------------------------
caltrain_dialog () {
    if [[ "$caltrain_api_countdown" -eq 0 ]]; then
        api_label="Running Now!"
    else
        api_label="$caltrain_api_countdown left."
    fi

    sleep 2

    dTitle="Caltrain - Live Transit Times From San Francisco"
    dMessage="**Next live status update in:** $api_label **Last live update:** $caltrain_api_pull_time \n\n
Caltrain - Any delays will be posted here:\n
**$cleaned_up_text** \n\n
\n\n
San Francisco Schedule"

    timer=10
    dButton1="Quit"
    dIconDir="$dialogIconDir"
    dBackDir="$dialogBackGroundDir"
    dInfoBox="__Welcome to Side!__\n\n
__580 4th St, San Francisco, CA__
\n\n
(415) 525-4913
\n\n
__Need Help?__
[helpdesk@side.com](<span class="math-inline">dialogHDURL\)"
userTimeSelection\=</span>("${dialog_bin}" \
        --title "$dTitle" \
        --titlefont "$dialogTitleFont" \
        --message "$dMessage" \
        --messagefont "$msg_font" \
        --icon "$dIconDir" \
        --iconsize 120 \
        --button1text "$dButton1" \
        --height 100% \
        --width 100% \
        --background "$dBackDir" \
        --infobox "$dInfoBox" \
        --timer "<span class="math-inline">timer" \\
\-\-webcontent "https\://www\.caltrain\.com/station/sanfrancisco"
\#\-\-blurscreen
\)
returncode\=</span>?

    case "<span class="math-inline">\{returncode\}" in
0\)
echo "Pressed Button 1\: QUIT"
killall Dialog
exit 1
;;
\*\)
echo "Doing nothing, next slide\."
;;
esac
\}
\#\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\# Function\: get\_bart\_data
\# Description\: Retrieves BART service alerts and live departure times for Civic Center\.
\#\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
get\_bart\_data \(\) \{
echo "Starting get\_bart\_data function"
get\_bart\_status \(\) \{
echo "Fetching BART service advisories\.\.\."
sleep 2
BSA\_URL\="https\://api\.bart\.gov/api/bsa\.aspx?cmd\=bsa&key\=</span>{BART_API_KEY}&json=y"
        bsa_response=$(curl -s "<span class="math-inline">BSA\_URL"\)
\# Extract advisories text
bart\_status\=</span>(echo "$bsa_response" | jq -r '.root.bsa.description."#cdata-section"' 2>/dev/null)

        if [ -n "$bart_status" ]; then
            msg_font="name=Arial-MT,size=18,colour=#FF0000"
        else
            msg_








################# OG SCRIPT
#!/bin/bash

#Dialog 1: Loading
#Dialog 2: Live Traffic
#Dialog 3: Live Bart
#Dialog 4: Live Caltrain
#Dialog 5: Service Alerts


set_master_variables () {
	
	
	#API Keys
	caltrain_api_key="hey"
	gemini_key="hey"
	BART_API_KEY="hey"
	
	#setting limits
	caltrain_api_countdown=4
	caltrain_api_pull_time=$(date +"%m-%d-%Y %H:%M:%S")
	
    bart_api_countdown=4
	bart_api_pull_time=$(date +"%m-%d-%Y %H:%M:%S")
	
	
	#Dialog
    updatedDialogVersion=2.5.3
	dialog_bin="/usr/local/bin/dialog"
	dialog_download_url="https://github.com/swiftDialog/swiftDialog/releases/download/v2.5.3/dialog-2.5.3-4785.pkg"
	dialogDir='/usr/local/'
	swiftDialogPKG="swiftDialog.pkg"
	dialogAppDir="/Library/Application Support/Dialog/Dialog.app"
    
    wallpaperDir="/Library/Application Support/wallpaper/"
    wallpaperImg="desktopwallpaper.jpg"
    wallpaperPKGDir="/Library/Application Support/Jamf/Waiting Room/wallpaper.pkg"
	
	dialogTimer=15 #adjust this - time in seconds - how long do you want each alert to last for
	dialogIconDir="/Library/Application Support/SideIT/finishing.png"
	dialogBackGroundDir="/Library/Application Support/wallpaper/desktopwallpaper.jpg"
	dialogSlackURL="https://app.slack.com/client/T0XD2CN2V/CNW9PA7NG"
	dialogHDURL="https://sideinc.freshservice.com/support/catalog/items/131"
	dialogTitleFont="name=Arial-MT,colour=#CE87C1,size=30"
}

install_dialog () {
	
    if [ -f "$wallpaperDir$wallpaperImg" ]; then
    echo "Wallpaper found, skipping install"
    else
    echo "Installing wallpaper"
    sudo /usr/sbin/installer -pkg "$wallpaperPKGDir" -target /
    fi
    
	
	#Check Dialog version
	if [ -f $dialog_bin ]; then
		echo "Dialog app found, checking version"
        dialogVersion=$(defaults read /Library/Application\ Support/Dialog/Dialog.app/Contents/Info CFBundleShortVersionString)
		echo "Dialog Version: "$dialogVersion

		if [ $dialogVersion != $updatedDialogVersion ]; then
			#if not equal, then update
			echo "Dialog not up to date, updating..."
   		    echo "Dialog app not found, downloading and installing dialog"
	  	    ##Download swiftDialog
	  	    sudo /usr/bin/curl -L "$dialog_download_url" -o "$dialogDir$swiftDialogPKG"
	
	    	##Installing Dialog
	       sudo /usr/sbin/installer -pkg "$dialogDir$swiftDialogPKG" -target /
		    sleep 5
	
		    #Cleanup
		    sudo rm -r "$dialogDir$swiftDialogPKG"

        else
	        #if equal, do not update
	        echo "Dialog Version Correct, skipping update"
        fi
        
        
        
	else 
		echo "Dialog app not found, downloading and installing dialog"
	    ##Download swiftDialog
	    sudo /usr/bin/curl -L "$dialog_download_url" -o "$dialogDir$swiftDialogPKG"
	
	    ##Installing Dialog
	    sudo /usr/sbin/installer -pkg "$dialogDir$swiftDialogPKG" -target /
		sleep 5
	
		#Cleanup
		sudo rm -r "$dialogDir$swiftDialogPKG"
	fi
	

}

#######################################
#######################################
###### Get Services Data
# 1. Using isitdown.com - get WWW data, using specific status page, get feature status data
# 2. Put data in variables in print in dialog


services_dialog () {	

dTitle="Service Statuses"
dMessage="Website Statuses are pulled from isitdown.com - these are just for the main website and not the service.\n
Services Statuses are pulled from their respective status pages.\n

Google WWW:  $status_google   |   Service:  $google_status \n\n
Okta WWW:  $status_okta   |   Service:  $okta_status \n\n
Slack WWW:  $status_slack   |   Service:  $slack_status \n\n
Atlassian WWW:  $status_atlassian   |   Service:  $atlassian_status \n\n
Zoom WWW:  $status_zoom   |   Service:  $zoom_status \n\n
Side WWW:  $status_side   |   Service:  $sideapp_status
"
dButton1="Quit"
timer=$dialogTimer
dIconDir="$dialogIconDir"
dBackDir="$dialogBackGroundDir"
dInfoBox="__Welcome to Side!__\n\n
__580 4th St, San Francisco, CA__
\n\n
(415) 525-4913
\n\n
__Need Help?__  
[helpdesk@side.com]($dialogHDURL)"

get_driving_traffic_data &

	userTimeSelection=$(${dialog_bin} \
	    --title "$dTitle" \
		--titlefont "$dialogTitleFont" \
		--message "$dMessage" \
		--alignment center \
		--messagefont "name=Arial-MT,size=20" \
	    --icon "$dIconDir" \
		--iconsize 120 \
	    --button1text "$dButton1" \
		--height 100% \
		--width 100% \
		--background "$dBackDir" \
		--infobox "$dInfoBox" \
        --timer "$timer" \
		--webcontent "https://i.gifer.com/PYHc.gif" 
		#--blurscreen
 
	
	)		
	
	#Button pressed Stuff
			returncode=$?
	
	
	case ${returncode} in
				    0)  echo "Pressed Button 1: QUIT"
					kill $dialog_pid 2>/dev/null || echo "Dialog process not found or already terminated."
					exit 0
	
				        ;;
		
				    *)  echo "Doing nothing, next slide"


				        ;;
				esac
	
}




get_services_data () {

	get_service_statuses () {

		google_status_pull() {
		    # Fetch the Google Workspace Status Dashboard
		    STATUS_PAGE=$(curl -s https://www.google.com/appsstatus/)

		    # Check for the presence of known issue indicators
		    if echo "$STATUS_PAGE" | grep -q 'class="status yellow"' || echo "$STATUS_PAGE" | grep -q 'class="status red"'; then
		        echo "Google Workspace services are experiencing issues."
		        google_status="Experiencing issues"
		    else
		        echo "Google Workspace services appear to be operating normally."
		        google_status="✅"
		    fi
		}

		okta_status_pull () {
		    # Fetch Okta status page JSON
		    STATUS=$(curl -s https://status.okta.com/api/v2/status.json)

		    # Check if there's any incident or maintenance
		    if echo "$STATUS" | grep -q '"status":"active"'; then
		        echo "Okta is experiencing active incidents."
		        okta_status="Okta is experiencing issues."
		    elif echo "$STATUS" | grep -q '"status":"degraded_performance"'; then
		        echo "Okta is experiencing degraded performance."
		        okta_status="Experiencing issues"
		    else
		        echo "Okta services appear to be operational."
		        okta_status="✅"
		    fi
		}

		slack_status_pull () {
		    # Scrape the Slack status page
		    PAGE=$(curl -s https://slack-status.com/)

		    # Search for known keywords in the status page content
		    if echo "$PAGE" | grep -q "Some users may be having trouble sending messages"; then
		        echo "Experiencing trouble sending messages."
		        slack_status="Experiencing trouble sending messages"
		    elif echo "$PAGE" | grep -q "Some users may be having trouble sending files"; then
		        echo "Experiencing trouble sending files."
		        slack_status="Experiencing trouble sending files"
		    elif echo "$PAGE" | grep -q "Some users may be having trouble loading threads"; then
		        echo "Experiencing trouble loading threads."
		        slack_status="Experiencing trouble loading threads"
		    else
		        echo "Slack status appears normal."
		        slack_status="✅"
		    fi

		    # Final Status Display
		    echo "Final Slack Status: $slack_status"
		}

		zoom_status_pull () {
		    # Fetch Zoom status page JSON
		    STATUS=$(curl -s https://api.zoom.us/v2/metrics/status)

		    # Extract the status using jq
		    SERVICE_STATUS=$(echo "$STATUS" | jq -r '.status.description')

		    # Display the current status
		    echo "Zoom Status: $SERVICE_STATUS"

		    # Check for active incidents
		    INCIDENTS=$(echo "$STATUS" | jq -r '.incidents | length')

		    # Ensure INCIDENTS is set to 0 if not found or empty
		    INCIDENTS=${INCIDENTS:-0}

		    if [ "$INCIDENTS" -gt 0 ]; then
		        echo "There are $INCIDENTS active incidents on Zoom."
		        zoom_status="Experiencing $INCIDENTS"
		    else
		        echo "Zoom is fully operational."
		        zoom_status="✅"
		    fi
		}

		atlassian_status_pull () {
		    # Fetch Atlassian status page JSON
		    STATUS=$(curl -s https://api.status.atlassian.com/1.0/status)

		    # Extract the overall status using jq
		    SERVICE_STATUS=$(echo "$STATUS" | jq -r '.status.description')

		    # Display the current status
		    echo "Atlassian Status: $SERVICE_STATUS"

		    # Check for active incidents
		    INCIDENTS=$(echo "$STATUS" | jq -r '.incidents | length')

		    # Ensure INCIDENTS is set to 0 if not found or empty
		    INCIDENTS=${INCIDENTS:-0}

		    if [ "$INCIDENTS" -gt 0 ]; then
		        echo "There are $INCIDENTS active incidents on Atlassian services."
		        atlassian_status="Experiencing $INCIDENTS"
		    else
		        echo "Atlassian is fully operational."
		        atlassian_status="✅"
		    fi
		}
		
		
		sideapp_status_pull () {
		    # Fetch Atlassian status page JSON
		    STATUS=$(curl -s -w "%{http_code}" -o temp_output https://agent.sideinc.com/txm/api/health)

			http_code=${STATUS: -3}
			sideapp_status_result=$(<temp_output)

			if [ "$http_code" -eq 200 ]; then
			    echo "Success: $sideapp_status_result"
				sideapp_status="✅"
			else
			    echo "Experiencing HTTP code $http_code"
				sideapp_status="Experiencing HTTP code $http_code"
			fi
		    
		}

		#get info
		google_status_pull
		okta_status_pull
		slack_status_pull
		zoom_status_pull
		atlassian_status_pull
		sideapp_status_pull

		echo "Status: "
		echo $google_status
		echo $okta_status
		echo $slack_status
		echo $zoom_status
		echo $atlassian_status
		echo $sideapp_status

	}

	get_site_statuses () {

		# Function to check service status
		check_status() {
		    local service_name="$1"
		    local url="$2"
		    local response=$(curl -s "$url")

		    if echo "$response" | grep -q "is UP"; then
		        echo "✅"
		    elif echo "$response" | grep -q "is DOWN"; then
		        echo "is DOWN"
		    else
		        echo "Status - Unknown"
		    fi
		}

		# Check Google
		status_google=$(check_status "Google" "https://www.isitdownrightnow.com/google.com.html")

		# Check Okta
		status_okta=$(check_status "Okta" "https://www.isitdownrightnow.com/okta.com.html")

		# Check Slack
		status_slack=$(check_status "Slack" "https://www.isitdownrightnow.com/slack.com.html")

		# Check Atlassian
		status_atlassian=$(check_status "Atlassian" "https://www.isitdownrightnow.com/atlassian.com.html")

		# Check Zoom
		status_zoom=$(check_status "Zoom" "https://www.isitdownrightnow.com/zoom.us.html")

		#Check Side
		status_side=$(check_status "Side" "https://www.isitdownrightnow.com/side.com.html")

		echo "Results: "
		echo $status_google
		echo $status_okta
		echo $status_slack
		echo $status_atlassian
		echo $status_zoom
		echo $status_side
	}
	
	get_service_statuses
	get_site_statuses

wait $services_dialog_pid
}



#######################################
#######################################
###### Get Caltrain Data
# 1. Using 511.org API, pull Caltrain system alerts
# 2. Alerts come in the form of gibberish, use Gemini API to make an AI call to clean up alert
# 3. Alert is cleaned up and put in variable, variable is printed in dialog
# 3. Using --webcontent key, we also display barts website to how SF live data


get_caltrain_data () {

	echo "caltrain_api_countdown: "$caltrain_api_countdown	

	  # When countdown reaches 0, run the special command and reset the countdown
	  if (($caltrain_api_countdown == 0 || $caltrain_api_countdown == 4)); then
	    echo "Running special command on loop $i"
	   
	   
		# Ensure the API key is not empty
		if [ -z "$caltrain_api_key" ]; then
		    echo "API key is missing!"
		    exit 1
		fi

		# Define the API endpoint
		#url="http://api.511.org/transit/servicealerts?api_key=$caltrain_api_key&agency=CT"

		# Debugging: Print the API key and URL
		echo "Requesting URL: $url"

		# Use curl to make the request and capture the response
		response=$(curl -s "$url")

		#echo "Response"
		#echo $response

		echo "$response" | pbcopy

		echo "pasting: $(pbpaste)"

		cleaned_up_text=$(gemini-cli prompt "Please clean up the following text and organize it into a bullet point list with each item separated by new lines, removing any extraneous information and only leave the list items in english. Make sure the items are separeted in new lines in bullet point order and all non-english is removed. Remove anything with local week day. Here’s the text: $(pbpaste)" --key $gemini_key)
	   
	    caltrain_api_countdown=3 # Reset the countdown
		caltrain_api_pull_time=$(date +"%m-%d-%Y %H:%M:%S")
		echo "Time pull: "$caltrain_api_pull_time
	  fi

	
	echo "Cleaned text"
	echo "$cleaned_up_text"
	
	echo "Time pull: "$caltrain_api_pull_time


	if [ -n "$cleaned_up_text" ]; then
		#yes text
		msg_font="name=Arial-MT,size=18,colour=#FF0000"
	else
		#no text
		msg_font="name=Arial-MT,size=18"
	fi
let caltrain_api_countdown=$caltrain_api_countdown-1
 wait $bart_dialog_pid
	
}





caltrain_dialog () {
	
if [[ $caltrain_api_countdown -eq 0 ]]; then
api_label="Running Now!"
else
api_label="$caltrain_api_countdown left."
fi


	sleep 2

dTitle="Caltrain - Live Transit Times From San Francisco"
dMessage="**Next live status update in:** $api_label **Last live update:** $caltrain_api_pull_time \n\n
Caltrain - Any delays will be posted here:\n
**$cleaned_up_text** \n\n
\n\n


San Francisco Schedule"


timer=10 # 60 seconds * 10 min = 600
dButton1="Quit"
dIconDir="$dialogIconDir"
dBackDir="$dialogBackGroundDir"
dInfoBox="__Welcome to Side!__\n\n
__580 4th St, San Francisco, CA__
\n\n
(415) 525-4913
\n\n
__Need Help?__  
helpdesk@side.com"

	userTimeSelection=$(${dialog_bin} \
	    --title "$dTitle" \
		--titlefont "$dialogTitleFont" \
		--message "$dMessage" \
		--messagefont "$msg_font" \
	    --icon "$dIconDir" \
		--iconsize 120 \
	    --button1text "$dButton1" \
		--height 100% \
		--width 100% \
		--background "$dBackDir" \
		--infobox "$dInfoBox" \
	    --timer "$timer" \
		--webcontent "https://www.caltrain.com/station/sanfrancisco" 
	    #--blurscreen

	)
		
		#Button pressed Stuff
				returncode=$?
				
				case ${returncode} in
							    0)  echo "Pressed Button 1: QUIT"
								killall Dialog
								exit 1
	
							        ;;
		
							    *)  echo "Doing nothing, next slide"


							        ;;
							esac


}






#######################################
#######################################
###### Get BART Data
# 1. Using Bart API, we pull any system alerts and CIVIC station train times
# 2. If there are delays, we change the message font to highlight the delay or alert
# 3. Using --webcontent key, we also display barts website to how CIVIC live data

bart_dialog () {
	echo "launching bart dialog"
	
	if [[ $bart_api_countdown -eq 0 ]]; then
	bart_api_label="Running Now!"
	else
	bart_api_label="$bart_api_countdown left."
	fi

dTitle="BART - Live Transit Times From Civic Center"
dMessage="**Next live status update in:** $bart_api_label **Last live update:** $bart_api_pull_time \n\n

BART Current Status - Any delays will be posted here:\n
$bart_status \n\n

Civic Center Schedule: \n
**$live_schedule_times**"
dButton1="Quit"
timer=$1
dIconDir="$dialogIconDir"
dBackDir="$dialogBackGroundDir"
dInfoBox="__Welcome to Side!__\n\n
__580 4th St, San Francisco, CA__
\n\n
(415) 525-4913
\n\n
__Need Help?__  
helpdesk@side.com"


userTimeSelection=$(${dialog_bin} \
    --title "$dTitle" \
	--titlefont "$dialogTitleFont" \
	--message "$dMessage" \
	--messagefont "$msg_font" \
    --icon "$dIconDir" \
	--iconsize 120 \
    --button1text "$dButton1" \
	--height 100% \
	--width 100% \
	--background "$dBackDir" \
	--infobox "$dInfoBox" \
    --timer "$timer" \
	--webcontent "https://www.bart.gov/schedules/eta/CIVC" 
    #--blurscreen


)
	
	#Button pressed Stuff
			returncode=$?
		
	
	case ${returncode} in
			    0)  echo "Pressed Button 1: QUIT"
			    echo "Pressed Button 1: QUIT"
				killall Dialog
			              exit 0 


			        ;;
	
			    *)  echo "Doing nothing, next slide"


			        ;;
			esac

}




get_bart_data () {
	echo "get_bart_data function start"
	
	get_bart_status () {
		echo "get_bart_status nested function"
		
		sleep 2
		BSA_URL="https://api.bart.gov/api/bsa.aspx?cmd=bsa&key=${BART_API_KEY}&json=y"

		# Fetch service advisories
		bsa_response=$(curl -s "$BSA_URL")

		# Display the full response for troubleshooting
		echo "Full BART API Response:"
		echo "$bsa_response"

		sleep 3
		# Extract advisories text using sed for cdata-section
		echo "BART Service Advisories:"
		echo "$bsa_response" | sed -n 's/.*"description":{"#cdata-section":"\([^"]*\)"}.*/\1/p'
		bart_status=$(echo "$bsa_response" | sed -n 's/.*"description":{"#cdata-section":"\([^"]*\)"}.*/\1/p')
	
		sleep 2
	
		if [ -n "$bart_status" ]; then
		  msg_font="name=Arial-MT,size=18,colour=#FF0000"
		else
		  msg_font="name=Arial-MT,size=15"
		  bart_status="No current delays"
		fi
	
	
	}

	get_station_schedule () {
	echo "get_station_schedule nested function"

	# Define the BART API URL for live departures from Civic Center station (CIVC)
	API_URL="http://api.bart.gov/api/etd.aspx?cmd=etd&orig=CIVC&json=y&key=${BART_API_KEY}"

	# Make the API request using curl and follow redirects
	response=$(curl -s -L "$API_URL")

	# Check if the response is valid (not empty)
	if [[ -z "$response" ]]; then
	    echo "Error: No response from the API."
	    exit 1
	fi

	# Print the raw response to debug and verify it's valid JSON
	echo "Raw API Response:"
	echo "$response"

	# Check if 'etd' data exists in the response
	if echo "$response" | jq -e '.root.station[0].etd' >/dev/null; then
	    # Get tidy times (without quotes and properly formatted)
	    get_times=$(echo "$response" | jq -r '.root.station[0].etd[] | 
	      if .estimate[0].minutes == "Leaving" then
	        "\(.destination): Leaving"
	      else
	        "\(.destination): \(.estimate[0].minutes) min"
	      end')

	    # Print each departure time in a clean list format
	    echo "Upcoming Train Departures:"
		live_schedule_times=""
		for time in "$get_times"; do
		    live_schedule_times+="$time"$'\n'
		done
		
		echo "Travis logs:"
		echo "$live_schedule_times"
		
	else
	    echo "Error: No ETD (estimated departure) data available in the response."
		live_schedule_times="Error: Couldn't pull live data. Please refer to website for current schedule."
		echo "Pull live schedule before pushing to dialog: "$live_schedule_times
	fi

	
	}
	
	
	echo "bart_api_countdown: "$bart_api_countdown

	# Deduct 1 from the countdown
	
	
	echo "updated bart_api_countdown: "$bart_api_countdown

	  # When countdown reaches 0, run the special command and reset the countdown
	  if ((bart_api_countdown == 0 || bart_api_countdown == 4)); then
	    echo "Getting BART data $i"
	
	get_bart_status
	get_station_schedule
	
    bart_api_countdown=3 # Reset the countdown
	bart_api_pull_time=$(date +"%m-%d-%Y %H:%M:%S")
  	fi
	
	let bart_api_countdown=$bart_api_countdown-1
	
	#get_bart_status
	#get_station_schedule
	
	echo "Bart Data Pulled: "
	echo "Bart Status: "$bart_status
	echo "CIVIC Times: "$live_schedule_times
	echo "MSG Font: "$msg_font
	echo "moving onto dialog"
	
	wait $driving_traffic_map_pid
	
}





#######################################
#######################################
###### Get Live Traffic Data
# 1. Using Apple Shortcuts, a shortcut was made for every destination
# 2. Apple Script runs the shortcut and puts the ETA in clipboard and that is placed in a variable
# 3. The variable is then printed in the dialog
# 4. A live map of maps.google.com howing traffic patters and location is displaced via --webcontent key

driving_traffic_map_dialog () {
	echo "launching driving dialog"
	
dTitle="Live Traffic! Drive Time Estimations From Side Office."
dMessage="Map Powered by Google. ETA's Powered By Apple Maps.\n\n
The list on the left panel shows live estimated driving time from 580 4th St to those downtown locatons." 
dButton1="Quit"
timer=$dialogTimer
dIconDir="$dialogIconDir"
dBackDir="$dialogBackGroundDir"
dInfoBox="__Welcome to Side!__\n\n
__580 4th St, San Francisco, CA__
\n\n
(415) 525-4913
\n\n
__Need Help?__  
[helpdesk@side.com]($dialogHDURL)\n\n
\n\n
- - - - - - - - - 
__🚗 Driving To:__\n\n
**Berkeley:** $Berkeley_time\n
**Fremont:** $Fremont_time\n
**Morgan Hill:** $MorganHill_time\n
**Oakland:** $Oakland_time\n
**Palo Alto:** $PaloAlto_time\n
**Pier 39:** $Pier39_time\n
**San Jose:** $SanJose_time\n
**Walnut Creek:** $WalnutCreek_time\n\n
\n\n
- - - - - - - - - 
\n\n
__✈️ Airports:__\n\n
**Oakland Intl:** $OAK_time\n
**San Francisco Intl:** $SFO_time\n
**San Jose Intl:** $SJC_time"


	userTimeSelection=$(${dialog_bin} \
	    --title "$dTitle" \
		--titlefont "$dialogTitleFont" \
		--message "$dMessage" \
		--messagefont "name=Arial-MT,size=13" \
	    --icon "$dIconDir" \
		--iconsize 120 \
	    --button1text "$dButton1" \
		--height 100% \
		--width 100% \
		--background "$dBackDir" \
		--infobox "$dInfoBox" \
        --timer "$timer" \
		--webcontent "https://www.google.com/maps/@37.6139506,-122.4261246,10z/data=!5m1!1e1?entry=ttu&g_ep=EgoyMDI0MTExMS4wIKXMDSoASAFQAw%3D%3D" 
	    #--blurscreen
        
	
	)		
	
	#Button pressed Stuff
			returncode=$?
			
	case ${returncode} in
			    0)  echo "Pressed Button 1: QUIT"
				killall Dialog
				exit 1

			        ;;
	
			    *)  echo "Doing nothing, next slide"


			        ;;
			esac
	
}



get_driving_traffic_data () {
	echo "gettiing driving data"

	get_travel_time () {
	    local shortcut_name=$1  # Take shortcut name as a parameter

	    # Run the AppleScript for each shortcut
	    result=$(osascript <<EOF
	    tell application "Shortcuts Events"
	        set shortcutResult to run shortcut "$shortcut_name"
	    end tell

	    -- Initialize an empty string to hold the combined result
	    set resultText to ""

	    -- Iterate through each item in shortcutResult and concatenate them into resultText
	    repeat with anItem in shortcutResult
	        -- Add each item followed by a space to resultText
	        set resultText to resultText & anItem & " "
	    end repeat

	    -- Return the concatenated result as a string
	    resultText
EOF
	)

	    echo "$result"
	}

	# Get individual travel times for each location and store them in variables
	Pier39_time=$(get_travel_time "Travel Time Pier 39")
	Oakland_time=$(get_travel_time "Travel Time Oakland")
	Berkeley_time=$(get_travel_time "Travel Time Berkeley")
	WalnutCreek_time=$(get_travel_time "Travel Time Walnut Creek")
	Fremont_time=$(get_travel_time "Travel Time Fremont")
	SanJose_time=$(get_travel_time "Travel Time San Jose")
	PaloAlto_time=$(get_travel_time "Travel Time Palo Alto")
	SFO_time=$(get_travel_time "Travel Time SFO")
	OAK_time=$(get_travel_time "Travel Time OAK")            # Added OAK
	SJC_time=$(get_travel_time "Travel Time SJC")            # Added SJC
	MorganHill_time=$(get_travel_time "Travel Time Morgan Hill") # Added Morgan Hill

	# Now you can use the variables individually in different parts of the script
	# For example, echoing the times:
	echo "Estimted drive time from Side office to:"
	echo "Pier 39 Time: $Pier39_time"
	echo "Oakland Time: $Oakland_time"
	echo "Berkeley Time: $Berkeley_time"
	echo "Walnut Creek Time: $WalnutCreek_time"
	echo "Fremont Time: $Fremont_time"
	echo "San Jose Time: $SanJose_time"
	echo "Palo Alto Time: $PaloAlto_time"
	echo "SFO Time: $SFO_time"
	echo "OAK Time: $OAK_time"   # Display OAK time
	echo "SJC Time: $SJC_time"   # Display SJC time
	echo "Morgan Hill Time: $MorganHill_time"  # Display Morgan Hill time
	



	if ps -p $services_dialog_pid > /dev/null; then
	        echo "services_dialog is still running, waiting..."
	        wait $services_dialog_pid  # Wait for the process to finish
	    else
	        echo "services_dialog has finished, proceeding..."
	        # Continue to the next step (or code)
	    fi

}





startup_dialog () {
dTitle="Loading data... Please wait"
dMessage="Currently downloading the latest information, please wait..."
dButton1="Quit"
#timer=60
dIconDir="$dialogIconDir"
dBackDir="$dialogBackGroundDir"
dInfoBox="__Welcome to Side!__\n\n
__580 4th St, San Francisco, CA__
\n\n
(415) 525-4913
\n\n
__Need Help?__  
helpdesk@side.com"



# Display the dialog
    userTimeSelection=$(${dialog_bin} \
        --title "$dTitle" \
        --titlefont "$dialogTitleFont" \
        --message "$dMessage" \
        --messagefont "$msg_font" \
        --icon "$dIconDir" \
        --iconsize 120 \
        --button1text "$dButton1" \
        --height 100% \
        --width 100% \
        --background "$dBackDir" \
        --infobox "$dInfoBox" \
        --timer "$timer" \
        --webcontent "https://cdn.dribbble.com/users/5436944/screenshots/14793980/media/eb75f36d10810389e8c0ddefb7423e34.gif" 
        #--blurscreen
	)
		
		case ${returncode} in
				    0)  echo "Pressed Button 1: QUIT"
					killall Dialog
					exit 1
	
				        ;;
		
				    *)  echo "Doing nothing, next slide"


				        ;;
				esac
    

# Wait for the background process to finish and then kill the dialog
wait $driving_traffic_data_pid # Wait for the background task to finish
sleep 2
killall dialog  # Kill the dialog once the task is done
}



#kick it off
set_master_variables

echo "MAIN: Installing Dialog"
install_dialog

echo "MAIN: Launch startup dialog and download traffic data"
#launch loading dialog and get drivin traffic data
startup_dialog & get_driving_traffic_data

while true; do

	#echo "Start loop"
	#echo "MAIN: Launch driving traffic dialog and download bart data"
    ## Load driving dialog and get traffic data
    driving_traffic_map_dialog & get_bart_data

	echo "MAIN: Launch bart dialog and download caltrain data"
    # Load BART dialog and get caltrain data
    bart_dialog & get_caltrain_data 
	
	echo "MAIN: Launch caltrain dialog and download services data"
	#Load Caltrain dialog and get services data
	caltrain_dialog & get_services_data 
	
	echo "MAIN: Launch services dialog and download driving data"
	#Load Services dialog and get traffic data
	services_dialog & get_driving_traffic_data 
	
	#loop - start over from driving traffic
	echo "done, loop back to traffic dialog"

	
done
